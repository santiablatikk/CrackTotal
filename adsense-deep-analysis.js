#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç AN√ÅLISIS PROFUNDO PARA ADSENSE - FACTORES ADICIONALES');
console.log('='.repeat(75));

let recommendations = [];
let criticalIssues = [];
let optimizations = [];

// 1. AN√ÅLISIS DE CONTENIDO Y CALIDAD
console.log('\nüìù AN√ÅLISIS DE CONTENIDO Y CALIDAD:');

const contentPages = [
    'blog.html', 'games.html', 'about.html', 'contact.html',
    'blog-detail-messi.html', 'blog-detail-worldcups.html',
    'blog-detail-champions.html', 'blog-detail-libertadores.html',
    'mentiroso.html', 'quiensabemas.html', 'crack-rapido.html',
    'pasalache.html', 'profile.html', 'ranking.html'
];

let totalWords = 0;
let pagesWithImages = 0;
let pagesWithGoodLength = 0;

contentPages.forEach(page => {
    if (fs.existsSync(page)) {
        const content = fs.readFileSync(page, 'utf8');
        
        // Contar palabras (aproximado)
        const textContent = content.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ');
        const wordCount = textContent.split(' ').length;
        totalWords += wordCount;
        
        // Verificar si tiene buena longitud (>300 palabras)
        if (wordCount > 300) {
            pagesWithGoodLength++;
        }
        
        // Verificar si tiene im√°genes
        if (content.includes('<img') || content.includes('background-image')) {
            pagesWithImages++;
        }
        
        console.log(`üìÑ ${page}: ~${wordCount} palabras ${wordCount > 300 ? '‚úÖ' : '‚ö†Ô∏è'}`);
    }
});

const avgWordsPerPage = Math.round(totalWords / contentPages.filter(p => fs.existsSync(p)).length);
console.log(`\nüìä Estad√≠sticas de contenido:`);
console.log(`‚Ä¢ Promedio de palabras por p√°gina: ${avgWordsPerPage}`);
console.log(`‚Ä¢ P√°ginas con longitud adecuada (>300 palabras): ${pagesWithGoodLength}`);
console.log(`‚Ä¢ P√°ginas con im√°genes: ${pagesWithImages}`);

if (avgWordsPerPage < 300) {
    criticalIssues.push('Contenido demasiado corto (promedio < 300 palabras por p√°gina)');
} else if (avgWordsPerPage < 500) {
    recommendations.push('Agregar m√°s contenido (ideal 500+ palabras por p√°gina)');
}

// 2. AN√ÅLISIS DE NAVEGACI√ìN Y UX
console.log('\nüß≠ AN√ÅLISIS DE NAVEGACI√ìN Y UX:');

const navigationChecks = [
    { file: 'index.html', element: '<nav', name: 'Navegaci√≥n principal' },
    { file: 'index.html', element: 'breadcrumb', name: 'Breadcrumbs' },
    { file: 'index.html', element: 'footer', name: 'Footer informativo' },
    { file: 'index.html', element: 'search', name: 'Funci√≥n de b√∫squeda' }
];

navigationChecks.forEach(check => {
    if (fs.existsSync(check.file)) {
        const content = fs.readFileSync(check.file, 'utf8');
        if (content.toLowerCase().includes(check.element.toLowerCase())) {
            console.log(`‚úÖ ${check.name}`);
        } else {
            console.log(`‚ö†Ô∏è ${check.name} - Podr√≠a mejorarse`);
            optimizations.push(`Mejorar ${check.name.toLowerCase()}`);
        }
    }
});

// 3. AN√ÅLISIS DE VELOCIDAD Y RENDIMIENTO
console.log('\n‚ö° AN√ÅLISIS DE RENDIMIENTO:');

const performanceChecks = [
    { pattern: /\.css\?v=/, name: 'Cache busting en CSS' },
    { pattern: /\.js\?v=/, name: 'Cache busting en JS' },
    { pattern: /preload|prefetch/, name: 'Preload de recursos cr√≠ticos' },
    { pattern: /loading="lazy"/, name: 'Lazy loading de im√°genes' },
    { pattern: /ServiceWorker|sw\.js/, name: 'Service Worker implementado' }
];

if (fs.existsSync('index.html')) {
    const indexContent = fs.readFileSync('index.html', 'utf8');
    performanceChecks.forEach(check => {
        if (check.pattern.test(indexContent)) {
            console.log(`‚úÖ ${check.name}`);
        } else {
            console.log(`‚ö†Ô∏è ${check.name} - No implementado`);
            optimizations.push(`Implementar ${check.name.toLowerCase()}`);
        }
    });
}

// 4. AN√ÅLISIS DE SEO AVANZADO
console.log('\nüéØ AN√ÅLISIS DE SEO AVANZADO:');

const seoChecks = [
    { pattern: /"@type":\s*"WebSite"/, name: 'Schema.org WebSite' },
    { pattern: /"@type":\s*"Organization"/, name: 'Schema.org Organization' },
    { pattern: /rel="alternate"\s+hreflang/, name: 'Hreflang implementado' },
    { pattern: /property="og:/, name: 'Open Graph tags' },
    { pattern: /name="twitter:/, name: 'Twitter Cards' },
    { pattern: /manifest\.json/, name: 'Web App Manifest' }
];

if (fs.existsSync('index.html')) {
    const indexContent = fs.readFileSync('index.html', 'utf8');
    seoChecks.forEach(check => {
        if (check.pattern.test(indexContent)) {
            console.log(`‚úÖ ${check.name}`);
        } else {
            console.log(`‚ö†Ô∏è ${check.name} - Faltante`);
            optimizations.push(`Agregar ${check.name.toLowerCase()}`);
        }
    });
}

// 5. AN√ÅLISIS DE ACCESIBILIDAD
console.log('\n‚ôø AN√ÅLISIS DE ACCESIBILIDAD:');

const accessibilityChecks = [
    { pattern: /alt=["'][^"']*["']/, name: 'Atributos alt en im√°genes' },
    { pattern: /aria-label=/, name: 'Labels ARIA' },
    { pattern: /role=/, name: 'Roles ARIA' },
    { pattern: /skip-link/, name: 'Skip links' },
    { pattern: /<h[1-6]/, name: 'Estructura de headings' }
];

if (fs.existsSync('index.html')) {
    const indexContent = fs.readFileSync('index.html', 'utf8');
    accessibilityChecks.forEach(check => {
        if (check.pattern.test(indexContent)) {
            console.log(`‚úÖ ${check.name}`);
        } else {
            console.log(`‚ö†Ô∏è ${check.name} - Mejorable`);
            optimizations.push(`Mejorar ${check.name.toLowerCase()}`);
        }
    });
}

// 6. AN√ÅLISIS DE CONTENIDO √öNICO Y ORIGINAL
console.log('\nüé® AN√ÅLISIS DE ORIGINALIDAD:');

const blogPages = contentPages.filter(page => page.includes('blog-detail-'));
console.log(`‚Ä¢ Art√≠culos de blog originales: ${blogPages.length}`);
console.log(`‚Ä¢ P√°ginas de juegos interactivos: ${contentPages.filter(p => p.includes('.html') && !p.includes('blog')).length}`);

if (blogPages.length < 5) {
    recommendations.push('Agregar m√°s art√≠culos de blog originales (m√≠nimo 5-10)');
}

// 7. AN√ÅLISIS DE ELEMENTOS FALTANTES COMUNES
console.log('\nüîç VERIFICANDO ELEMENTOS ADICIONALES:');

const additionalElements = [
    { file: 'favicon.ico', name: 'Favicon principal' },
    { file: 'apple-touch-icon.png', name: 'Apple touch icon' },
    { file: 'google-site-verification.html', name: 'Verificaci√≥n de Google' },
    { file: 'BingSiteAuth.xml', name: 'Verificaci√≥n de Bing' }
];

additionalElements.forEach(element => {
    if (fs.existsSync(element.file)) {
        console.log(`‚úÖ ${element.name}`);
    } else {
        console.log(`‚ö†Ô∏è ${element.name} - Opcional pero recomendado`);
        optimizations.push(`Agregar ${element.name.toLowerCase()}`);
    }
});

// 8. RECOMENDACIONES ESPEC√çFICAS PARA ADSENSE
console.log('\nüí° FACTORES CR√çTICOS PARA APROBACI√ìN ADSENSE:');

const adsenseFactors = [
    'Tr√°fico org√°nico regular (m√≠nimo 100 visitantes/d√≠a)',
    'Tiempo de permanencia alto (>2 minutos promedio)',
    'Contenido actualizado regularmente',
    'Baja tasa de rebote (<70%)',
    'Navegaci√≥n clara y intuitiva',
    'Contenido original y valioso',
    'Sin contenido copiado o duplicado',
    'Cumplimiento de pol√≠ticas de Google'
];

console.log('\nüìã CHECKLIST FINAL PARA ADSENSE:');
adsenseFactors.forEach((factor, index) => {
    console.log(`${index + 1}. ${factor}`);
});

// RESUMEN FINAL
console.log('\n' + '='.repeat(75));
console.log('üìä RESUMEN DEL AN√ÅLISIS PROFUNDO:');

console.log(`\n‚úÖ FORTALEZAS:`);
console.log(`‚Ä¢ Configuraci√≥n t√©cnica perfecta (100%)`);
console.log(`‚Ä¢ Pol√≠ticas legales completas`);
console.log(`‚Ä¢ Contenido de nicho espec√≠fico (f√∫tbol)`);
console.log(`‚Ä¢ M√∫ltiples p√°ginas de contenido`);
console.log(`‚Ä¢ Estructura profesional`);

if (criticalIssues.length > 0) {
    console.log(`\nüö® PROBLEMAS CR√çTICOS:`);
    criticalIssues.forEach(issue => console.log(`‚Ä¢ ${issue}`));
}

if (recommendations.length > 0) {
    console.log(`\nüí° RECOMENDACIONES IMPORTANTES:`);
    recommendations.forEach(rec => console.log(`‚Ä¢ ${rec}`));
}

if (optimizations.length > 0) {
    console.log(`\n‚ö° OPTIMIZACIONES OPCIONALES:`);
    optimizations.slice(0, 5).forEach(opt => console.log(`‚Ä¢ ${opt}`));
    if (optimizations.length > 5) {
        console.log(`‚Ä¢ ... y ${optimizations.length - 5} m√°s`);
    }
}

console.log(`\nüéØ VEREDICTO FINAL:`);
if (criticalIssues.length === 0) {
    console.log(`üü¢ TU SITIO EST√Å LISTO PARA APLICAR A ADSENSE`);
    console.log(`‚Ä¢ Probabilidad de aprobaci√≥n: ALTA`);
    console.log(`‚Ä¢ Factor limitante principal: Tr√°fico y engagement`);
} else {
    console.log(`üü° NECESITA ALGUNAS MEJORAS ANTES DE APLICAR`);
    console.log(`‚Ä¢ Corrige los problemas cr√≠ticos identificados`);
}

console.log(`\nüìà FACTORES CLAVE PARA √âXITO:`);
console.log(`1. üöÄ Generar tr√°fico org√°nico (SEO, redes sociales)`);
console.log(`2. üì± Promover en redes sociales de f√∫tbol`);
console.log(`3. üìù Publicar contenido nuevo semanalmente`);
console.log(`4. üîó Conseguir enlaces de otros sitios de f√∫tbol`);
console.log(`5. üìä Usar Google Analytics para mostrar actividad`);

console.log('\n' + '='.repeat(75)); 