#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç Validando archivos para deploy...');

// Lista de archivos cr√≠ticos que deben existir
const criticalFiles = [
    'index.html',
    'games.html',
    'blog.html',
    'about.html',
    'contact.html',
    'privacy.html',
    'cookies.html',
    'terminos.html',
    'ads.txt',
    'robots.txt',
    'sitemap.xml',
    'server.js',
    'package.json'
];

// Lista de directorios cr√≠ticos
const criticalDirs = [
    'assets',
    'assets/css',
    'assets/js',
    'assets/images',
    'assets/data'
];

let hasErrors = false;

// Validar archivos cr√≠ticos
console.log('üìÑ Validando archivos cr√≠ticos...');
for (const file of criticalFiles) {
    if (!fs.existsSync(file)) {
        console.error(`‚ùå Archivo cr√≠tico faltante: ${file}`);
        hasErrors = true;
    } else {
        console.log(`‚úÖ ${file}`);
    }
}

// Validar directorios cr√≠ticos
console.log('\nüìÅ Validando directorios cr√≠ticos...');
for (const dir of criticalDirs) {
    if (!fs.existsSync(dir)) {
        console.error(`‚ùå Directorio cr√≠tico faltante: ${dir}`);
        hasErrors = true;
    } else {
        console.log(`‚úÖ ${dir}/`);
    }
}

// Validar package.json
console.log('\nüì¶ Validando package.json...');
try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    if (!packageJson.name || !packageJson.version) {
        console.error('‚ùå package.json mal formado');
        hasErrors = true;
    } else {
        console.log(`‚úÖ ${packageJson.name} v${packageJson.version}`);
    }
} catch (error) {
    console.error('‚ùå Error leyendo package.json:', error.message);
    hasErrors = true;
}

// Validar ads.txt para AdSense
console.log('\nüí∞ Validando configuraci√≥n AdSense...');
try {
    const adsContent = fs.readFileSync('ads.txt', 'utf8');
    if (adsContent.includes('pub-9579152019412427')) {
        console.log('‚úÖ ads.txt configurado correctamente');
    } else {
        console.warn('‚ö†Ô∏è  ads.txt podr√≠a necesitar configuraci√≥n');
    }
} catch (error) {
    console.error('‚ùå Error leyendo ads.txt:', error.message);
    hasErrors = true;
}

// Verificar que no haya archivos de desarrollo/prueba
console.log('\nüßπ Verificando ausencia de archivos de desarrollo...');
const devFiles = [
    'debug-ranking.html',
    'test-ranking.html',
    'create-test-data.html',
    'test-simple.html'
];

let foundDevFiles = false;
for (const file of devFiles) {
    if (fs.existsSync(file)) {
        console.warn(`‚ö†Ô∏è  Archivo de desarrollo encontrado: ${file}`);
        foundDevFiles = true;
    }
}

if (!foundDevFiles) {
    console.log('‚úÖ No se encontraron archivos de desarrollo');
}

// Resultado final
console.log('\n' + '='.repeat(50));
if (hasErrors) {
    console.error('‚ùå VALIDACI√ìN FALLIDA - Hay errores cr√≠ticos');
    process.exit(1);
} else {
    console.log('‚úÖ VALIDACI√ìN EXITOSA - Listo para deploy');
    console.log('üöÄ Todos los archivos cr√≠ticos est√°n presentes');
    console.log('üéØ Proyecto preparado para AdSense');
    process.exit(0);
} 